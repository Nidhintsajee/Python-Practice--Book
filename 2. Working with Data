2.1. Lists
----------
Problem 1: What will be the output of the following program?

x = [0, 1, [2]]
x[2][0] = 3
print x
x[2].append(4)
print x
x[2] = 2
print x

ans 1:
[0, 1, [3]]
[0, 1, [3, 4]]
[0, 1, 2]

2.1.1. The for Statement

Problem 2: Python has a built-in function sum to find sum of all elements of a list. Provide an implementation for sum.

>>> sum([1, 2, 3])
>>> 6

ans 2:
def sum(a):
...     s=0
...     for i in a:
...             s=s+i
...     print s

Problem 3: What happens when the above sum function is called with a list of strings? Can you make your sum function work for
a list of strings as well.

>>> sum(["hello", "world"])
"helloworld"
>>> sum(["aa", "bb", "cc"])
"aabbcc"

ans 3:
 def sum(a):
...     s=''
...     for i in a:
...             s=s+i
...     print s

Problem 4: Implement a function product, to compute product of a list of numbers.

>>> product([1, 2, 3])
6

ans 4:
def product(list):
    p = 1
    for i in list:
        p *= i
    return p

Problem 5: Write a function factorial to compute factorial of a number. Can you use the product function defined in the 
previous example to compute factorial?

>>> factorial(4)
24
ans 5:
def factorial(n):
    num = 1
    for n >= 1:
        num = num * n
        n = n - 1
    return num

Problem 6: Write a function reverse to reverse a list. Can you do this without using list slicing?

>>> reverse([1, 2, 3, 4])
[4, 3, 2, 1]
>>> reverse(reverse([1, 2, 3, 4]))
[1, 2, 3, 4]

ans 6:
def reverse(text):

    lst = []
    count = 1

    for i in range(0,len(text)):

        lst.append(text[len(text)-count])
        count += 1

 
Problem 7: Python has built-in functions min and max to compute minimum and maximum of a given list. Provide an implementation
for these functions. What happens when you call your min and max functions with a list of strings?

 a=[1,2,3,6,4]

min(a)
1
>>> max(a)
6

Problem 8: Cumulative sum of a list [a, b, c, ...] is defined as [a, a+b, a+b+c, ...]. Write a function cumulative_sum to 
compute cumulative sum of a list. Does your implementation work for a list of strings?

>>> cumulative_sum([1, 2, 3, 4])
[1, 3, 6, 10]
>>> cumulative_sum([4, 3, 2, 1])
[4, 7, 9, 10]
Problem 9: Write a function cumulative_product to compute cumulative product of a list of numbers.

>>> cumulative_product([1, 2, 3, 4])
[1, 2, 6, 24]
>>> cumulative_product([4, 3, 2, 1])
[4, 12, 24, 24]
Problem 10: Write a function unique to find all the unique elements of a list.

>>> unique([1, 2, 1, 3, 2, 5])
[1, 2, 3, 5]
Problem 11: Write a function dups to find all duplicates in the list.

>>> dups([1, 2, 1, 3, 2, 5])
[1, 2]
Problem 12: Write a function group(list, size) that take a list and splits into smaller lists of given size.

>>> group([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> group([1, 2, 3, 4, 5, 6, 7, 8, 9], 4)
[[1, 2, 3, 4], [5, 6, 7, 8], [9]]
2.1.2. Sorting Lists
